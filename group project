#Afreen#
class RestaurantReservation:
    """
    A class to manage restaurant reservations.

    Attributes:
        reservations (dict): A dictionary to store reservation details with the customer's name as key.

    Methods:
        make_reservation(name, time, date): Adds a new reservation.
        change_reservation(name, new_time, new_date): Updates an existing reservation.
        get_reservation(name): Retrieves a specific reservation by customer name.
        cancel_reservation(name): Removes an existing reservation by customer name.
    """

    def __init__(self):
        """Initializes the RestaurantReservation with an empty dictionary for reservations."""
        self.reservations = {}

    def make_reservation(self, name, time, date):
        """
        Adds a reservation for a specified customer.

        Args:
            name (str): The name of the customer making a reservation.
            time (str): The time of the reservation.
            date (str): The date of the reservation.

        Returns:
            None
        """
        self.reservations[name] = {'time': time, 'date': date}
        print(f"Reservation for{name} on {date} at {time}.")

    def change_reservation(self, name, new_time, new_date):
        """
        Updates the reservation details for an existing reservation.

        Args:
            name (str): The name of the customer whose reservation is to be changed.
            new_time (str): The new time for the reservation.
            new_date (str): The new date for the reservation.

        Returns:
            None

        Prints:
            A message indicating whether the reservation was found and updated, or not found.
        """
        if name in self.reservations:
            self.reservations[name]['time'] = new_time
            self.reservations[name]['date'] = new_date
        else:
            print(f"Reservation '{name}' not found.")

    def get_reservation(self, name):
        """
        Retrieves the reservation details for a specific customer.

        Args:
            name (str): The name of the customer whose reservation details are to be retrieved.

        Returns:
            dict: A dictionary containing the reservation details if found, otherwise None.

        Prints:
            A message indicating whether the reservation was found or not.
        """
        if name in self.reservations:
            reservations = self.reservations[name]
            return self.reservations[name]
            print(f"Reservations for {name}: {reservation['date']} at {reservation['time']}")
        else:
            print(f"Reservation '{name}' not found.")
            

    def cancel_reservation(self, name):
        """
        Cancels an existing reservation for a specified customer.

        Args:
            name (str): The name of the customer whose reservation is to be canceled.

        Returns:
            None

        Prints:
            A message indicating whether the reservation was successfully canceled or not found.
        """
        if name in self.reservations:
            del self.reservations[name]
            print(f"Reservation '{name}' has been canceled.")
        else:
            print(f"Reservation '{name}' not found.")

#Main interaction loop #Ayo 
resturant = ResturantReservation()
while True:
    print("\nOptions:")
    print("1. Make a reservation")
    print("2. Change a reservation")
    print("3. View a reservation")
    print("4. Cancel a reservation")
    print("5. Exit")
    choice = input("Choose an option: ")

    if choice == "1":
        name = input("Enter the customer's name: ")
        time = input("Enter the time of the reservation (HH:MM): ")
        date = input("Enter the date of the reservation (YYYY-MM-DD): ")
        resturant.make_reservation(name, time, date)
   elif choice == "2":
        name = input("Enter the customer's name whose reservation is to be changed: ")
        new_time = input("Enter the new time of the reservation (HH:MM): ")
        new_date = input("Enter the new date of the reservation (YYYY-MM-DD): ")
        resturant.change_reservation(name, new_time, new_date)
  elif choice == "3": 
        name = input("Enter the customer's name to view the reservation: ")
        resturant.get_reservation(name)
  elif choice == "4":
        name = input("Enter the customer's name to cancelthe reservation: ")
        resturant.cancel_reservation(name)
  elif choice == "5":
        print("Exiting...")
        break
  else: 
        print("Invalid option. Please try again.")

def say_goodbye():
    print("Goodbye")

# Call the function
say_goodbye()

   
