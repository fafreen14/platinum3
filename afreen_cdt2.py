# -*- coding: utf-8 -*-
"""Afreen.CDT2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yFELtiZfsJEwzQuMVPX9US-LymQz_cKz
"""

words = ['apple', 'banana', 'orange', 'kiwi', 'grape']
sorted_words = sorted(words, key=lambda x: len(x))
print("Sorted list of words based on length:")
for word in sorted_words:
  print(word)

"""In Python, lambda expressions are anonymous functions. The lambda keyword is used to define them. They contain a single expression but can accept any number of arguments. When specifying a function in its entirety is unnecessary and it is only needed for a brief duration, lambda expressions are frequently utilized.

Sorted_words = sorted(words, key=lambda x: len(x))

When the lambda expression lambda x: len(x) is evaluated, a function object is created that uses the len() function to take a string x as input and return its length. Then, sorted() uses this function object as its primary function to order the list of words according to their lengths. AÂ lambda expression evaluates to a function object that can then be called with the right arguments to output a result. The lambda expression evaluates to a function object in the sorting context, which takes one or more properties or elements from each item in the iterable.
"""

squares_of_evens = [x**2 for x in range(1, 11) if x % 2 == 0]
print(squares_of_evens)

"""List comprehension is a concise and elegant way to create lists in Python. It allows you to construct a new list by applying an expression to each item in an existing iterable (such as a list, tuple, or range) and optionally filtering the items based on a condition. List comprehensions are more readable and often more efficient than using traditional looping constructs like for loops.


"""